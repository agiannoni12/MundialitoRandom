[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\agust\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\agust\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Oracle Corporation Java 1.8.0_322)
[debug]       Load.loadUnit: plugins took 58.9626ms
[debug]       Load.loadUnit: defsScala took 0.2454ms
[debug] [Loading] Scanning directory C:\Users\agust\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\agust\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.5593 ms
[debug]           Load.resolveProject(global-plugins) took 134.0021ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\agust\.sbt\1.0\plugins, plugins: List(<none>))) took 163.709ms
[debug] [Loading] Done in C:\Users\agust\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 180.3431ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2956ms
[debug]     Load.loadUnit(file:/C:/Users/agust/.sbt/1.0/plugins/, ...) took 245.1483ms
[debug]   Load.apply: load took 371.6811ms
[debug]   Load.apply: resolveProjects took 4.2096ms
[debug]   Load.apply: finalTransforms took 39.914ms
[debug]   Load.apply: config.delegates took 7.6922ms
[debug]   Load.apply: Def.make(settings)... took 278.903ms
[debug]   Load.apply: structureIndex took 71.7104ms
[debug]   Load.apply: mkStreams took 1.5409ms
[info] loading global plugins from C:\Users\agust\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1656.0976ms
[debug]           Load.loadUnit: plugins took 12.882ms
[debug]           Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project
[debug]             Load.loadUnit: mkEval took 5.6859ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1676 ms
[info] loading settings for project mundialrandom-build from idea1.sbt ...
[debug]               Load.resolveProject(mundialrandom-build) took 3.9234ms
[debug]             Load.loadTransitive: finalizeProject(Project(id mundialrandom-build, base: C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project, plugins: List(<none>))) took 5.5374ms
[debug] [Loading] Done in C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project, returning: (mundialrandom-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 108.1431ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.1074ms
[debug]         Load.loadUnit(file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/project/, ...) took 124.8637ms
[debug]       Load.apply: load took 125.758ms
[debug]       Load.apply: resolveProjects took 0.0873ms
[debug]       Load.apply: finalTransforms took 4.6949ms
[debug]       Load.apply: config.delegates took 0.2533ms
[debug]       Load.apply: Def.make(settings)... took 52.4316ms
[debug]       Load.apply: structureIndex took 14.9139ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 383.6662ms
[debug]     Load.loadUnit: defsScala took 0.005ms
[debug] [Loading] Scanning directory C:\Users\agust\Desktop\ScalaWorks\MundialRandom
[debug]       Load.loadUnit: mkEval took 0.2559ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5602 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 23.1418ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\agust\Desktop\ScalaWorks\MundialRandom, plugins: List(<none>))) took 27.1577ms
[debug] [Loading] Done in C:\Users\agust\Desktop\ScalaWorks\MundialRandom, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 76.1978ms
[debug]     Load.loadUnit: cleanEvalClasses took 1.918ms
[debug]   Load.loadUnit(file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/, ...) took 462.3925ms
[debug] Load.apply: load took 463.4798ms
[debug] Load.apply: resolveProjects took 0.0794ms
[debug] Load.apply: finalTransforms took 14.8657ms
[debug] Load.apply: config.delegates took 0.316ms
[debug] Load.apply: Def.make(settings)... took 49.0756ms
[debug] Load.apply: structureIndex took 17.873ms
[debug] Load.apply: mkStreams took 0.0028ms
[info] set current project to MundialRandom (in build file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57610 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57610, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to MundialRandom (in build file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/)
[debug] > Exec(idea-shell, None, None)
