[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\agust\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\agust\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Oracle Corporation Java 1.8.0_322)
[debug]       Load.loadUnit: plugins took 77.0342ms
[debug]       Load.loadUnit: defsScala took 0.2772ms
[debug] [Loading] Scanning directory C:\Users\agust\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\agust\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.6661 ms
[debug]           Load.resolveProject(global-plugins) took 123.1769ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\agust\.sbt\1.0\plugins, plugins: List(<none>))) took 154.472ms
[debug] [Loading] Done in C:\Users\agust\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 169.9563ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2119ms
[debug]     Load.loadUnit(file:/C:/Users/agust/.sbt/1.0/plugins/, ...) took 253.0722ms
[debug]   Load.apply: load took 390.5605ms
[debug]   Load.apply: resolveProjects took 4.231ms
[debug]   Load.apply: finalTransforms took 47.7219ms
[debug]   Load.apply: config.delegates took 8.7129ms
[debug]   Load.apply: Def.make(settings)... took 299.1825ms
[debug]   Load.apply: structureIndex took 78.6852ms
[debug]   Load.apply: mkStreams took 1.7621ms
[info] loading global plugins from C:\Users\agust\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1705.621ms
[debug]           Load.loadUnit: plugins took 15.2068ms
[debug]           Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project
[debug]             Load.loadUnit: mkEval took 4.7883ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6174 ms
[info] loading settings for project mundialrandom-build from idea2.sbt ...
[debug]               Load.resolveProject(mundialrandom-build) took 9.1192ms
[debug]             Load.loadTransitive: finalizeProject(Project(id mundialrandom-build, base: C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project, plugins: List(<none>))) took 11.2263ms
[debug] [Loading] Done in C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project, returning: (mundialrandom-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 133.1956ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.0905ms
[debug]         Load.loadUnit(file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/project/, ...) took 153.2371ms
[debug]       Load.apply: load took 154.531ms
[debug]       Load.apply: resolveProjects took 0.1761ms
[debug]       Load.apply: finalTransforms took 8.1933ms
[debug]       Load.apply: config.delegates took 0.4112ms
[debug]       Load.apply: Def.make(settings)... took 61.3097ms
[debug]       Load.apply: structureIndex took 20.4997ms
[debug]       Load.apply: mkStreams took 0.0032ms
[info] loading project definition from C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 482.6599ms
[debug]     Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\agust\Desktop\ScalaWorks\MundialRandom
[debug]       Load.loadUnit: mkEval took 0.4129ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.5624 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 20.3916ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\agust\Desktop\ScalaWorks\MundialRandom, plugins: List(<none>))) took 23.4563ms
[debug] [Loading] Done in C:\Users\agust\Desktop\ScalaWorks\MundialRandom, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 67.3864ms
[debug]     Load.loadUnit: cleanEvalClasses took 3.4015ms
[debug]   Load.loadUnit(file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/, ...) took 554.0335ms
[debug] Load.apply: load took 555.5379ms
[debug] Load.apply: resolveProjects took 0.136ms
[debug] Load.apply: finalTransforms took 21.1698ms
[debug] Load.apply: config.delegates took 0.5182ms
[debug] Load.apply: Def.make(settings)... took 105.8686ms
[debug] Load.apply: structureIndex took 26.2334ms
[debug] Load.apply: mkStreams took 0.0036ms
[info] set current project to MundialRandom (in build file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57610 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57610, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to MundialRandom (in build file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/)
[debug] > Exec(idea-shell, None, None)
