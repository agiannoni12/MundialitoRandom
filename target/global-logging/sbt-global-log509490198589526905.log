[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\agust\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\agust\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.8 (Oracle Corporation Java 1.8.0_322)
[debug]       Load.loadUnit: plugins took 53.4402ms
[debug]       Load.loadUnit: defsScala took 0.2012ms
[debug] [Loading] Scanning directory C:\Users\agust\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\agust\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.3228 ms
[debug]           Load.resolveProject(global-plugins) took 30.7064ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\agust\.sbt\1.0\plugins, plugins: List(<none>))) took 59.0148ms
[debug] [Loading] Done in C:\Users\agust\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 72.0291ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1639ms
[debug]     Load.loadUnit(file:/C:/Users/agust/.sbt/1.0/plugins/, ...) took 130.8213ms
[debug]   Load.apply: load took 234.8584ms
[debug]   Load.apply: resolveProjects took 3.7093ms
[debug]   Load.apply: finalTransforms took 35.7121ms
[debug]   Load.apply: config.delegates took 5.3793ms
[debug]   Load.apply: Def.make(settings)... took 251.8662ms
[debug]   Load.apply: structureIndex took 65.4086ms
[debug]   Load.apply: mkStreams took 1.6129ms
[info] loading global plugins from C:\Users\agust\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3297.3652ms
[debug]           Load.loadUnit: plugins took 13.3402ms
[debug]           Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project
[debug]             Load.loadUnit: mkEval took 5.3888ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2723 ms
[info] loading settings for project mundialrandom-build from idea.sbt ...
[debug]               Load.resolveProject(mundialrandom-build) took 1.997ms
[debug]             Load.loadTransitive: finalizeProject(Project(id mundialrandom-build, base: C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project, plugins: List(<none>))) took 3.7989ms
[debug] [Loading] Done in C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project, returning: (mundialrandom-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 87.97ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.083ms
[debug]         Load.loadUnit(file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/project/, ...) took 105.1052ms
[debug]       Load.apply: load took 105.9644ms
[debug]       Load.apply: resolveProjects took 0.0853ms
[debug]       Load.apply: finalTransforms took 6.018ms
[debug]       Load.apply: config.delegates took 0.4112ms
[debug]       Load.apply: Def.make(settings)... took 52.5263ms
[debug]       Load.apply: structureIndex took 15.8677ms
[debug]       Load.apply: mkStreams took 0.0026ms
[info] loading project definition from C:\Users\agust\Desktop\ScalaWorks\MundialRandom\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 445.3ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\agust\Desktop\ScalaWorks\MundialRandom
[debug]       Load.loadUnit: mkEval took 0.1729ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.1869 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 23.9121ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\agust\Desktop\ScalaWorks\MundialRandom, plugins: List(<none>))) took 27.4704ms
[debug] [Loading] Done in C:\Users\agust\Desktop\ScalaWorks\MundialRandom, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1638.6552ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.2749ms
[debug]   Load.loadUnit(file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/, ...) took 2089.9132ms
[debug] Load.apply: load took 2091.2386ms
[debug] Load.apply: resolveProjects took 0.1179ms
[debug] Load.apply: finalTransforms took 16.3568ms
[debug] Load.apply: config.delegates took 0.294ms
[debug] Load.apply: Def.make(settings)... took 43.3764ms
[debug] Load.apply: structureIndex took 13.2863ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to MundialRandom (in build file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60635 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60635, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to MundialRandom (in build file:/C:/Users/agust/Desktop/ScalaWorks/MundialRandom/)
[debug] > Exec(idea-shell, None, None)
